import { useNavigation, useFocusEffect } from '@react-navigation/native';

const navigation = useNavigation();

  useFocusEffect(
    React.useCallback(() => {
      const onBackPress = (e) => {
        e.preventDefault(); // Empêcher le comportement par défaut de la navigation

        Alert.alert(
          "Hold on!",
          "Are you sure you want to go back?",
          [
            {
              text: "Cancel",
              onPress: () => null,
              style: "cancel"
            },
            { text: "YES", onPress: () => navigation.dispatch(e.data.action) }
          ]
        );
      };

      // Ajouter l'écouteur pour l'événement de retour
      const unsubscribe = navigation.addListener('beforeRemove', onBackPress);

      return unsubscribe;
    }, [navigation])
  );







const resizeImage = async (imageUri) => {
        const resizedImage = await ImageManipulator.manipulateAsync(
          imageUri,
          [{ resize: { width: 100, height: 100 } }],
          { compress: 1, format: ImageManipulator.SaveFormat.PNG, base64: true }
        );
        return resizedImage.uri;
    };
    
    const resizeAllImages = async () => {
        const resizedImages = await Promise.all(setImages.map(async image => {
          const resizedUri = await resizeImage(image.uri);
          return { ...image, uri: resizedUri };
        }));
        setImages(resizedImages);
    };