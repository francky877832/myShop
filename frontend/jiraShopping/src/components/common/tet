exports.LikeButton = (props) => {
    const {favourites, addFavourite, addFavouriteContext, removeFavourite, hasLiked, liked, setLikedIcon, disableLikeButton} = useContext(FavouritesContext)
    const {item, hasLikedItem, _handleLikePressed, synchro, isCard, styles} = props
    const style = styles || {}

    const [like, setLikeIcon ] = useState(hasLikedItem)
    const timeoutRef = useRef(null);

    const handleLikePressed = (item) => {
        synchro ? _handleLikePressed(item) : setLikeIcon(!like)

        //addFavouriteContext(item)
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }

        // Configurer un nouveau timeout
        timeoutRef.current = setTimeout(() => {
            like ?  addFavourite(item,false) : addFavourite(item,true)
        }, 1000);

    }
    useEffect(()=>{
        item.liked = hasLiked(item)
        setLikeIcon(item.liked);
        //setLikedIcon(hasLiked(item));
    }, [favourites])
    //console.log(hasLikedItem)

    return(
            <Pressable style={[commonSimpleComponentsStyles.likeButton.likeIcon, isCard ? productStyles.card : false]} onPress = { ()=>{ handleLikePressed(item)  } }>
                    {!hasLikedItem  ? <BadgeIcon name="heart-outline" size={24} color={style.color} badgeCount={0} styles={{}}/> : <BadgeIcon name="heart-sharp" size={24} color={appColors.secondaryColor1} badgeCount={0} styles={{}}/>}
            </Pressable>
    )