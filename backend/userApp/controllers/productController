const Product = require('../models/productModel');


exports.addProductUser = (req, res, next) => {
  console.log("ok");
  const datas = req.body;
  delete datas._id;
  delete datas.seller;

  const imageFiles = req.files
  let imageNames = imageFiles.map((file)=> {return `${req.protocol}://${req.get('host')}/userApp/assets/images/${file.filename}`})
  console.log(imageNames)
  const product = new Product(
    {
      ...datas,
      name : datas.name,
      description : datas.description,
      price : datas.price,
      newPrice : datas.newPrice,
      minPrice : datas.minPrice,
      maxPrice : datas.maxPrice,
      condition : datas.condition,
      seller : datas.seller, //req.auth.userId
      category : datas.category,
      brand : datas.brand,
      couleur : datas.couleur,
      images : imageNames,
      feesBy : datas.feesBy,
      garanti : datas.garanti,
      stock : datas.stock,
      visibility : datas.visibility
    })

  product.save()
  .then(
    () => {
      res.status(200).json({ message: "Produit cree avec success" });
    })
  .catch(
    (error) => {
      res.status(400).json({ error: error });
    }
  );
};



exports.updateProduct = (req, res, next) => {
  const datas = req.body
  delete datas._id
  delete datas.seller
  const product = {
      name : datas.name,
      description : datas.description,
      price : datas.price,
      newPrice : datas.newPrice,
      minPrice : datas.minPrice,
      maxPrice : datas.maxPrice,
      condition : datas.condition,
      seller : datas.seller,
      category : datas.category,
      brand : datas.brand,
      couleur : datas.couleur,
      images : datas.images,
      feesBy : datas.feesBy,
      garanti : datas.garanti,
      stock : datas.stock,
      visibility : datas.visibility
  }
  Product.updateOne({ _id : req.params.id }, product)
  .then( () => { 
      res.status(200).json({ message: 'Produit mis a jour avec success' });
  })
  .catch( (error) => { 
      res.status(400).json({error: error});
   });
};


exports.updateProductVisibility = (req, res, next) => {
  const datas = req.body 
  Product.updateOne({ _id : req.params.id }, { visibility : datas.visibility })
  .then( () => { 
      res.status(200).json({ message: 'Visibilite du roduit mis a jour avec success' });
  })
  .catch( (error) => { 
      res.status(400).json({error: error});
   });
};




exports.removeProduct  = (req, res, next) => {
  const datas = req.body 
  Product.deleteOne({ _id : req.params.id })
  .then( () => { 
      res.status(200).json({ message: 'Produit supprime avec succes.'});
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};

exports.getProducts = (req, res, next) => {
  Product.find()
  .then( (products) => {
    console.log("ok");
      res.status(200).json(products);
  })
  .catch( (error) => {
      res.status(400).json({ error: error});
  });
};

exports.getProduct  = (req, res, next) => {
  Product.findOne({ _id : req.params.id })
  .then( (product) => { 
      res.status(200).json(product);
   })
  .catch( (error) => { 
      //res.end("erreur");
      res.status(400).json({ error: error, message : "go" });
   });
};

exports.getProductsFromCategories  = (req, res, next) => {
  const datas = req.body 
  Product.find({ category : { $in : datas.category } })
  .then( (products) => { 
    console.log(products)
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};

exports.getProductsUser  = (req, res, next) => {
  Product.find({ seller : req.params.user })
  .then( (products) => { 
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};

//Cest mieux de gerer cette fonctionnalite cote backend
exports.getUserProductsFromCategory  = (req, res, next) => {
  const datas = req.body 
  Product.find({ user : datas.user, category : datas.category })
  .then( (products) => { 
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};



//Search products by names, category
//historique de recherhce
//resultats de recherches, puis avec filtres
exports.getSearchedProducts = (req, res, next) => {
  const datas = req.body 
  let filters = {};
  if(datas.name)
  {
    filters = { ...filters, name : { $regex: new RegExp(".*"+datas.name+".*", 'i') }}
  }

  if(datas.category)
  {
    filters = { ...filters, category : datas.category }
  }

  if(datas.price)
  {
    filters = { ...filters, price : {$gte : datas.minPrice, $lte : datas.maxPrice }, }
  }

  if(datas.condition)
  {
    filters = { ...filters, condition : datas.condition }
  }

  if(datas.feesBy)
  {
      filters = { ...filters,   feesBy : datas.feesBy }
  }
  Product.find(filters)
  .then( (products) => {
      res.status(200).json(products);
  })
  .catch( (error) => {
      res.status(400).json({ error: error });
  });
};


exports.getProductNumLikes  = (req, res, next) => {
  Product.findOne({ _id : req.params.id })
      .then( (product) => { 
          res.status(200).json(product);
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};

exports.updateProductNumLikes  = (req, res, next) => {
  Product.updateOne({ _id : req.params.id }, { $inc : { likes : datas.updateLikes } } )
      .then( () => { 
          res.status(200).json({ message : (datas.updateLikes==1) ? "Le produit a recu un nouveau like." : "Le produit a perdu un like." });
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};


