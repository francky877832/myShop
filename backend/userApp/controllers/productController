const fs = require('fs');

const Product = require('../models/productModel');
const Fuse = require('fuse.js');



exports.addProductUser = (req, res, next) => {
 
  const datas = req.body;
  //console.log(req.files)
  delete datas._id;
 // delete datas.seller;

  const imageFiles = req.files
  let imageNames = imageFiles.map((file)=> {return `${req.protocol}://${req.get('host')}/userApp/assets/images/${file.filename}`})
 
  const product = new Product(
    {
      ...datas,
      seller : datas.seller, //req.auth.userId
      images : imageNames,
    })
 

  product.save()
  .then(() => {
    
      res.status(200).json({ message: "Produit cree avec success" });
    })
  .catch( (error) => {
      console.log(error)
      res.status(400).json({ error: "trop erreur?" });
    }
  );
};



exports.updateProduct = (req, res, next) => {
  const product = req.file ? {
        ...JSON.parse(req.body.product),
        imageUrl: `${req.protocol}://${req.get('host')}/userApp/assets/images/${req.file.filename}`
     } : { ...req.body };
  const datas = req.body
  delete datas._id
  delete datas.seller

//if product.seller eq auth.user
  Product.updateOne({ _id : req.params.id }, product)
  .then( () => { 
      res.status(200).json({ message: 'Produit mis a jour avec success' });
  })
  .catch( (error) => { 
      res.status(400).json({error: error});
   });
};


exports.updateProductVisibility = (req, res, next) => {
  const datas = req.body 
  Product.updateOne({ _id : req.params.id }, { visibility : datas.visibility })
  .then( () => { 
      res.status(200).json({ message: 'Visibilite du roduit mis a jour avec success' });
  })
  .catch( (error) => { 
      res.status(400).json({error: error});
   });
};




exports.removeProduct  = (req, res, next) => {
  const datas = req.body 

  Product.find({ _id : req.params.id })
  .then( (product) => {
//controle de securite
      for(let i in product.images)
      {
          const filename = product.images[i].split('/images/')[1];
          s.unlink(`./userApp/assets/images/${filename}`, () => {})
      }

      Product.deleteOne({ _id : req.params.id })
      .then( () => { 
        res.status(200).json({ message: 'Produit supprime avec succes.'});
      })
      .catch( (error) => { 
        res.status(400).json({ error: error });
      });
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};

/*exports.getProducts = async (req, res, next) => {
  const page = parseInt(req.query.page) || 1; // Page actuelle, par défaut 1
  const limit = parseInt(req.query.limit) || 5; // Nombre d'éléments par page, par défaut 20
  const skip = (page - 1) * limit;
  console.log(req.query.page)

  Product.find().skip(skip).limit(limit).exec()
    .then (async(products) => {
    //console.log("ok");
    const totalDatas = await Product.countDocuments().exec();
    const totalPages = Math.ceil(totalDatas / limit);
    //console.log("ooooo")
      res.status(200).json({datas:products, page:page,totalPages:totalPages,totalDatas:totalDatas});
  })
  .catch ((error) => {
    console.log(error)
      res.status(400).json({ error: error+"go"});
  });
};*/


exports.getProducts = async (req, res, next) => {
  const page = parseInt(req.query.page) || 1; // Page actuelle, par défaut 1
  const limit = parseInt(req.query.limit) || 5; // Nombre d'éléments par page, par défaut 5
  const skip = (page - 1) * limit;

  try {
    const products = await Product.aggregate([
      { $sort: { createdAt: -1 } }, // Trier les produits les plus récents en premier
      { $skip: skip },
      { $limit: limit },
      {
        $lookup: {
          from: 'comments', // Nom de la collection des commentaires
          localField: '_id',
          foreignField: 'product',
          as: 'comments'
        }
      },
      {
        $lookup: {
          from: 'users', // Nom de la collection des utilisateurs
          localField: 'comments.user',
          foreignField: '_id',
          as: 'userDetails'
        }
      },
      {
        $addFields: {
          comments: {
            $map: {
              input: {
                $let: {
                  vars: {
                    sortedComments: {
                      $sortArray: { input: "$comments", sortBy: { createdAt: -1 } }
                    }
                  },
                  in: "$$sortedComments"
                }
              },
              as: "comment",
              in: {
                _id: "$$comment._id",
                text: "$$comment.text",
                user: "$$comment.user",
                username: "$$comment.username",
                isResponseTo: "$$comment.isResponseTo",
                visible: "$$comment.visible",
                createdAt: "$$comment.createdAt",
                updatedAt: "$$comment.updatedAt",
                userDetails: {
                  $arrayElemAt: [
                    {
                      $filter: {
                        input: "$userDetails",
                        as: "userDetail",
                        cond: { $eq: ["$$userDetail._id", "$$comment.user"] }
                      }
                    },
                    0
                  ]
                },
                subComment: "$$comment.subComment" // Inclure les sous-commentaires
              }
            }
          }
        }
      },
      {
        $group: {
          _id: '$_id',
          name: { $first: '$name' },
          description: { $first: '$description' },
          price: { $first: '$price' },
          newPrice: { $first: '$newPrice' },
          minPrice: { $first: '$minPrice' },
          maxPrice: { $first: '$maxPrice' },
          condition: { $first: '$condition' },
          seller: { $first: '$seller' },
          sellerName: { $first: '$sellerName' },
          category: { $first: '$category' },
          brand: { $first: '$brand' },
          couleur: { $first: '$couleur' },
          images: { $first: '$images' },
          feesBy: { $first: '$feesBy' },
          garanti: { $first: '$garanti' },
          stock: { $first: '$stock' },
          likes: { $first: '$likes' },
          inBasket: { $first: '$inBasket' },
          sold: { $first: '$sold' },
          visibility: { $first: '$visibility' },
          createdAt: { $first: '$createdAt' },
          updatedAt: { $first: '$updatedAt' },
          comments: { $first: '$comments' } // Conserver les commentaires correctement triés
        }
      }
    ]);

    const totalDatas = await Product.countDocuments().exec();
    const totalPages = Math.ceil(totalDatas / limit);
    console.log(products[0].comments)
    res.status(200).json({ datas: products, page: page, totalPages: totalPages, totalDatas: totalDatas });
  } catch (error) {
    console.log(error);
    res.status(400).json({ error: error.message });
  }
};






exports.getProduct  = (req, res, next) => {
  
  Product.findOne({ _id : req.params.id })
  .then( (product) => { 
    //console.log("*******Ok********")
    //console.log(product)
      res.status(200).json(product);
   })
  .catch( (error) => { 
      //res.end("erreur");
      res.status(400).json({ error: error, message : "go" });
   });
};

exports.getProductsFromCategories  =async  (req, res, next) => {
  //console.log(req.query)
  const {category, } = req.query
  let subCategory = JSON.parse(req.query.subCategory)[0]
  let products;
  try
  {
    if(!!subCategory)
    { console.log("HERE")
      //console.log([`${category}/${subCategory[0]}`])
      products = await Product.find({ category : { $in : [`${category}/${subCategory}`] } })
    }
    else
    {
      //console.log("THERE")
      products = await Product.find({ category: { $regex: `${category}`, $options: "i" } })
    }
    //console.log(JSON.parse(datas.category))
  
      //console.log(products)
      res.status(200).json(products);
  }catch(error) { 
      res.status(400).json({ error: error });
  }
};

exports.getProductsUser  = (req, res, next) => {
  console.log("getProductsUser")
  const page = parseInt(req.query.page) || 1; // Page actuelle, par défaut 1
  const limit = parseInt(req.query.limit) || 5; // Nombre d'éléments par page, par défaut 20
  const skip = (page - 1) * limit;
  console.log(req.query.page)

  Product.find({ seller : req.params.user }).skip(skip).limit(limit).exec()
    .then (async(products) => {
    //console.log("ok");
    const totalDatas = await Product.countDocuments().exec();
    const totalPages = Math.ceil(totalDatas / limit);
    //console.log("ooooo")
      res.status(200).json({datas:products, page:page,totalPages:totalPages,totalDatas:totalDatas});
  })
  .catch ((error) => {
    console.log(error)
      res.status(400).json({ error: error+"go"});
  });
};

//Cest mieux de gerer cette fonctionnalite cote backend
exports.getUserProductsFromCategory  = (req, res, next) => {
  const datas = req.body 
  Product.find({ user : datas.user, category : datas.category })
  .then( (products) => { 
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};



//Search products by names, category
//historique de recherhce
//resultats de recherches, puis avec filtres
exports.getSearchedProducts = async (req, res, next) => {
  //console.log("SERAHC PRODUCTS")
  //console.log(req.query)
  const { name, customFilters } = req.query;
  console.log(customFilters)
  const page = parseInt(customFilters['page']) || 1; // Page actuelle, par défaut 1
  const limit = parseInt(customFilters['limit']) || 5; // Nombre d'éléments par page, par défaut 20
  const skip = (page - 1) * limit;
  //console.log(req.query.page)
  //console.log(customFilters)

  /* Product.find().skip(skip).limit(limit).exec()
    .then (async(products) => {
    //console.log("ok");
    const totalDatas = await Product.countDocuments().exec();
    const totalPages = Math.ceil(totalDatas / limit);
    //console.log("ooooo")
      res.status(200).json({datas:products, page:page,totalPages:totalPages,totalDatas:totalDatas});
  })
  .catch ((error) => {
    console.log(error)
      res.status(400).json({ error: error+"go"});
  });
};*/
  let result = []
  try {
        let products = []
        if(customFilters.hasOwnProperty("orderBy"))
        {
          let filed = Object.keys(customFilters.orderBy)[0]
          let sortValue = {[filed]:parseInt(customFilters.orderBy[filed])}
          //console.log(sortValue)
          products  = await Product.find().sort(sortValue)//.skip(skip).limit(limit).exec()
        }
        else
        {
          products  = await Product.find().sort({updatedAt:-1})//.skip(skip).limit(limit).exec()
          
        }
      const totalDatas = await Product.countDocuments().exec();
      const totalPages = Math.ceil(totalDatas / limit);
//console.log(products.length)
     //Introduire un champ comme memoire mour le tri   
        products.forEach((product, index) => {
          product.sortIndex = index;
        });

    if(!name)
    {
      result = products
      //console.log("vide")
    }
    else
    {
      const fuse = new Fuse(products, {
      keys: ['name', 'description', 'category'],
      threshold: 0.5, // Ajustez ce seuil selon vos besoins
      });
      // Effectuer la recherche floue
      result = fuse.search(name).map(result => result.item);
    }

    //console.log(result)
    
    // Appliquer des filtres personnalisés si nécessaire
    let filteredResult = result//.slice(skip, limit);
    //console.log(filteredResult)
    //console.log(customFilters.minPrice)
    if (customFilters.categories?.length > 0) {
      filteredResult = filteredResult.filter(product => {
        
          if(customFilters.categories[0].split('/').length == 2)
          { 
            return customFilters.categories.includes(product.category);
          }
          else
          {
            //console.log(product)
            const escapedCategory = product.category.split('/')[0]
            const categoryRegex = new RegExp(`^${escapedCategory}`, 'i');
            //console.log(escapedCategory)
            return customFilters.categories.some(cat => categoryRegex.test(cat));
          }
      
      })
    }
    if (customFilters.brands?.length > 0) {
      filteredResult = filteredResult.filter(product => customFilters.brands.includes(product.brand));
    }
    if (customFilters.condition?.length > 0) {
      filteredResult = filteredResult.filter(product => customFilters.condition.includes(product.condition));
    }
    if (customFilters.minPrice) {
      filteredResult = filteredResult.filter(product => customFilters.minPrice <= product.price);
    }
    if (customFilters.maxPrice) {
      filteredResult = filteredResult.filter(product => customFilters.maxPrice >= product.price);
    }
      //comme FUSE JS ne conserve pas l'ordre, utiliser la memoire de tri
      filteredResult.sort((a, b) => a.sortIndex - b.sortIndex);
    //res.json(filteredResult); 
    //console.log(skip, skip+limit)
    console.log(filteredResult.slice(skip, skip+limit).length)
    res.status(200).json({datas:filteredResult.slice(skip, skip+limit), page:page,totalPages:totalPages,totalDatas:totalDatas});

  } catch (err) {
    console.log(err)
    res.status(500).json({ error: err.message });
  }

}

exports.getProductNumLikes  = (req, res, next) => {
  Product.findOne({ _id : req.params.id })
      .then( (product) => { 
          res.status(200).json(product);
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};

exports.updateProductNumLikes  = (req, res, next) => {
  //const datas = req.body
  Product.updateOne({ _id : req.params.id }, { $inc : { likes : req.body.updateLikes } } )
      .then( () => { 
        //console.log("LIKEE")
          res.status(200).json({ message : (req.body.updateLikes==1) ? "Le produit a recu un nouveau like." : "Le produit a perdu un like." });
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};


