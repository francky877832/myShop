const fs = require('fs');

const Product = require('../models/productModel');
const Fuse = require('fuse.js');



exports.addProductUser = (req, res, next) => {
 
  const datas = req.body;
  //console.log(req.files)
  delete datas._id;
 // delete datas.seller;

  const imageFiles = req.files
  let imageNames = imageFiles.map((file)=> {return `${req.protocol}://${req.get('host')}/userApp/assets/images/${file.filename}`})
 
  const product = new Product(
    {
      ...datas,
      seller : datas.seller, //req.auth.userId
      images : imageNames,
    })
 

  product.save()
  .then(() => {
    
      res.status(200).json({ message: "Produit cree avec success" });
    })
  .catch( (error) => {
      console.log(error)
      res.status(400).json({ error: "trop erreur?" });
    }
  );
};



exports.updateProduct = (req, res, next) => {
  const product = req.file ? {
        ...JSON.parse(req.body.product),
        imageUrl: `${req.protocol}://${req.get('host')}/userApp/assets/images/${req.file.filename}`
     } : { ...req.body };
  const datas = req.body
  delete datas._id
  delete datas.seller

//if product.seller eq auth.user
  Product.updateOne({ _id : req.params.id }, product)
  .then( () => { 
      res.status(200).json({ message: 'Produit mis a jour avec success' });
  })
  .catch( (error) => { 
      res.status(400).json({error: error});
   });
};


exports.updateProductVisibility = (req, res, next) => {
  const datas = req.body 
  Product.updateOne({ _id : req.params.id }, { visibility : datas.visibility })
  .then( () => { 
      res.status(200).json({ message: 'Visibilite du roduit mis a jour avec success' });
  })
  .catch( (error) => { 
      res.status(400).json({error: error});
   });
};




exports.removeProduct  = (req, res, next) => {
  const datas = req.body 

  Product.find({ _id : req.params.id })
  .then( (product) => {
//controle de securite
      for(let i in product.images)
      {
          const filename = product.images[i].split('/images/')[1];
          s.unlink(`./userApp/assets/images/${filename}`, () => {})
      }

      Product.deleteOne({ _id : req.params.id })
      .then( () => { 
        res.status(200).json({ message: 'Produit supprime avec succes.'});
      })
      .catch( (error) => { 
        res.status(400).json({ error: error });
      });
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};

exports.getProducts = (req, res, next) => {
  Product.find()
  .then( (products) => {
    console.log("ok");
      res.status(200).json(products);
  })
  .catch( (error) => {
      res.status(400).json({ error: error+"go"});
  });
};

exports.getProduct  = (req, res, next) => {
  Product.findOne({ _id : req.params.id })
  .then( (product) => { 
      res.status(200).json(product);
   })
  .catch( (error) => { 
      //res.end("erreur");
      res.status(400).json({ error: error, message : "go" });
   });
};

exports.getProductsFromCategories  = (req, res, next) => {
  const datas = req.body 
  Product.find({ category : { $in : datas.category } })
  .then( (products) => { 
    console.log(products)
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};

exports.getProductsUser  = (req, res, next) => {
  Product.find({ seller : req.params.user })
  .then( (products) => { 
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};

//Cest mieux de gerer cette fonctionnalite cote backend
exports.getUserProductsFromCategory  = (req, res, next) => {
  const datas = req.body 
  Product.find({ user : datas.user, category : datas.category })
  .then( (products) => { 
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};



//Search products by names, category
//historique de recherhce
//resultats de recherches, puis avec filtres
exports.getSearchedProducts = async (req, res, next) => {
  //console.log("SERAHC PRODUCTS")
  //console.log(req.query)
  const { name, customFilters } = req.query;
  //console.log(customFilters)
  let result = []
  try {
        let products = []
        if(customFilters.hasOwnProperty("orderBy"))
        {
          let filed = Object.keys(customFilters.orderBy)[0]
          let sortValue = {[filed]:parseInt(customFilters.orderBy[filed])}
          //console.log(sortValue)
          products  = await Product.find().sort(sortValue);
        }
        else
        {
          products  = await Product.find()
        }
        
        

    if(!name)
    {
      result = products
      //console.log("vide")
    }
    else
    {
      const fuse = new Fuse(products, {
      keys: ['name', 'description', 'category'],
      threshold: 0.5, // Ajustez ce seuil selon vos besoins
      });

      // Effectuer la recherche floue
      result = fuse.search(name).map(result => result.item);
    }
    //console.log(result)
    
    
    // Appliquer des filtres personnalisés si nécessaire
    let filteredResult = result;
    //console.log(customFilters.minPrice)
    if (customFilters.categories?.length > 0) {
      filteredResult = filteredResult.filter(product => customFilters.categories.includes(product.category));
    }
    if (customFilters.brands?.length > 0) {
      filteredResult = filteredResult.filter(product => customFilters.brands.includes(product.brand));
    }
    if (customFilters.condition?.length > 0) {
      filteredResult = filteredResult.filter(product => customFilters.condition.includes(product.condition));
    }
    if (customFilters.minPrice) {
      filteredResult = filteredResult.filter(product => customFilters.minPrice <= product.price);
    }
    if (customFilters.maxPrice) {
      filteredResult = filteredResult.filter(product => customFilters.maxPrice >= product.price);
    }

    res.json(filteredResult);
  } catch (err) {
    console.log(err)
    res.status(500).json({ error: err.message });
  }

}

exports.getProductNumLikes  = (req, res, next) => {
  Product.findOne({ _id : req.params.id })
      .then( (product) => { 
          res.status(200).json(product);
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};

exports.updateProductNumLikes  = (req, res, next) => {
  //const datas = req.body
  Product.updateOne({ _id : req.params.id }, { $inc : { likes : req.body.updateLikes } } )
      .then( () => { 
        //console.log("LIKEE")
          res.status(200).json({ message : (req.body.updateLikes==1) ? "Le produit a recu un nouveau like." : "Le produit a perdu un like." });
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};


