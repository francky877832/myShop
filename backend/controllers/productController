const Product = require('../models/productModel');


exports.createProduct = (req, res, next) => {
  const product = new Product(
    {
      title: req.body.title,
      description: req.body.desc,
      imageUrl: "non def",
      userId: "req.body.user",
      price: 55,
    }
  )

  product.save()
  .then(
    () => {
      res.end("Sauvegarde reussie");
      res.status(200).json({ message: "Success" });
    })
  .catch(
    (error) => {
      //res.end("sauvegarde echouee", error);
      console.log(req.body);

      //res.end("Sauvegarde echoue");
      res.status(400).json({ error: error });
    }
  );
};


exports.getAllProduct = (req, res, next) => {
  Product.find()
  .then( (products) => {
      res.status(200).json(products);
  })
  .catch( (error) => {
      res.status(400).json({ error: error });
  });
};

exports.getOneProduct  = (req, res, next) => {
  Product.findOne({ _id : req.params.id })
  .then( (product) => { 
      res.status(200).json(product);
   })
  .catch( (error) => { 
      //res.end("erreur");
      res.status(400).json({ error: error, message : "go" });
   });
};


exports.updateProduct = (req, res, next) => {
  const product = new Product({
      _id : req.params.id,
      title: req.body.title,
      description: req.body.desc,
      imageUrl: "non def",
      userId: "req.body.user",
      price: 55,
    });

  Product.updateOne({ _id : req.params.id }, product)
  .then( () => { 
      res.status(200).json({ message: 'Produit mis a jour avec success' });
  })
  .catch( (error) => { 
      res.status(400).json({error: error});
   });
};


exports.deleteProduct  = (req, res, next) => {
  Product.deleteOne({ _id : req.params.id })
  .then( () => { 
      res.status(200).json({ message: 'Deleted!'});
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};


exports.getProductsFromCategories  = (req, res, next) => {
  Product.find({ category : { $in : req.body.category } })
  .then( (products) => { 
    console.log(products)
      res.status(200).json(products);
   })
  .catch( (error) => { 
      res.status(400).json({ error: error });
   });
};




//Search products by names, category
//historique de recherhce
//resultats de recherches, puis avec filtres
exports.getSearchedProducts = (req, res, next) => {
  let filters = {};
  if(req.body.name)
  {
    filters = { ...filters, name : { $regex: new RegExp(".*"+req.body.name+".*", 'i') }}
  }

  if(req.body.category)
  {
    filters = { ...filters, category : req.body.category }
  }

  if(req.body.price)
  {
    filters = { ...filters, price : {$gte : req.body.minPrice, $lte : req.body.maxPrice }, }
  }

  if(req.body.condition)
  {
    filters = { ...filters, condition : req.body.condition }
  }

  if(req.body.feesBy)
  {
      filters = { ...filters,   feesBy : req.body.feesBy }
  }
  Product.find(filters)
  .then( (products) => {
      res.status(200).json(products);
  })
  .catch( (error) => {
      res.status(400).json({ error: error });
  });
};


exports.getProductNumLikes  = (req, res, next) => {
  Product.findOne({ _id : req.params.id })
      .then( (product) => { 
          res.status(200).json(product);
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};

exports.updateProductNumLikes  = (req, res, next) => {
  Product.updateOne({ _id : req.params.id }, { $inc : { likes : req.body.updateLikes } } )
      .then( () => { 
          res.status(200).json({ message : (req.body.updateLikes==1) ? "Le produit a recu un nouveau like." : "Le produit a perdu un like." });
      })
      .catch( (error) => { 
          res.status(400).json({ error: error });
      });
};


